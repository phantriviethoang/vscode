{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Tailwind CDN": {
        "prefix": "tailwind",
        "body": [
            "<script src=\"https://cdn.tailwindcss.com\"></script>"
        ],
        "description": "Tailwind CDN"
    },
    "Alpine CDN": {
        "prefix": "alpinecdn",
        "body": [
            "<script src=\"//unpkg.com/alpinejs\" defer></script>"
        ],
        "description": "Alpine.js CDN"
    },
    "Vue CDN": {
        "prefix": "vuecdn",
        "body": [
            "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>"
        ],
        "description": "Vue CDN"
    },
    "return": {
        "prefix": "re",
        "body": "return ",
        "description": "return"
    },
    "document": {
        "prefix": "dcm",
        "body": "document",
        "description": "document"
    },
    "dq - document.querySelector": {
        "prefix": "dq",
        "body": "document.querySelector('.$1')",
        "description": "document.querySelector"
    },
    "dqa - document.querySelector": {
        "prefix": "dqa",
        "body": "document.querySelectorAll('.$1')",
        "description": "document.querySelectorAll"
    },
    // Snippet cho function
    "fn - function name()": {
        "prefix": "fn",
        "body": [
            "function $1($2) {",
            "    $3",
            "}"
        ],
        "description": "Function declaration"
    },
    // Snippet cho arrow function
    "afun - arrow function": {
        "prefix": "arfn",
        "body": [
            "const $1 = ($2) => {",
            "    $3",
            "};"
        ],
        "description": "Arrow function declaration"
    },
    "arrow - () => {}": {
        "prefix": "ar",
        "body": [
            "($1) => {",
            "    $2",
            "}"
        ],
        "description": "Anonymous arrow function"
    },
    "each - .forEach(() => {})": {
        "prefix": "each",
        "body": [
            "forEach(($1) => {",
            "    $2",
            "});"
        ],
        "description": "Array forEach arrow function"
    },
    "ael - .addEventListener()": {
        "prefix": "ael",
        "body": [
            "addEventListener('$1', ($2) => {",
            "    $3",
            "});"
        ],
        "description": "addEventListener with arrow function"
    },
    "Class Method snippet": {
        "prefix": "met",
        "body": [
            "${1:methodName}($2) {",
            "\t$0",
            "}"
        ],
        "description": "Create a class method with parentheses and body"
    },
    "PHP open tag inline": {
        "prefix": "pt",
        "body": [
            "<?php $0 ?>"
        ],
        "description": "PHP open and close tags on one line"
    },
    "PHP short echo tag": {
        "prefix": "et",
        "body": [
            "<?= $1 ?>"
        ],
        "description": "PHP short echo tag"
    },
}
